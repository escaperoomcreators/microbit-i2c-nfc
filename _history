{"entries":[{"timestamp":1735447922800,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// This MakeCode expansion for micro:bit allows identification of RFID cards using a module with a PN532.\n// It should work with:\n// - DFRobot Gravity module (https://wiki.dfrobot.com/Gravity:%20I2C%20&%20UART%20NFC%20Module%20SKU:%20DFR0231-H#target_5)\n// - Elecfreaks Octopus module (https://wiki.elecfreaks.com/en/microbit/sensor/octopus-sensors/sensor/octopus_ef04105)\n//\n// Code is largely grabbed from Octopus expansion at https://github.com/elecfreaks/pxt-octopus/blob/master/main.ts\n\nlet NFC_I2C_ADDR = (0x48 >> 1);\nlet recvBuf = pins.createBuffer(32);\nlet recvAck = pins.createBuffer(8);\nlet ackBuf = pins.createBuffer(6);\nlet uId = pins.createBuffer(4);\nlet passwdBuf = pins.createBuffer(6);\nlet blockData = pins.createBuffer(16);\nlet NFC_ENABLE = 0;\nconst block_def = 1;\nackBuf[0] = 0x00;\nackBuf[1] = 0x00;\nackBuf[2] = 0xFF;\nackBuf[3] = 0x00;\nackBuf[4] = 0xFF;\nackBuf[5] = 0x00;\npasswdBuf[0] = 0xFF;\npasswdBuf[1] = 0xFF;\npasswdBuf[2] = 0xFF;\npasswdBuf[3] = 0xFF;\npasswdBuf[4] = 0xFF;\npasswdBuf[5] = 0xFF;\n\nfunction writeAndReadBuf(buf: Buffer, len: number) {\n    pins.i2cWriteBuffer(NFC_I2C_ADDR, buf);\n    basic.pause(100);\n    recvAck = pins.i2cReadBuffer(NFC_I2C_ADDR, 8);\n    basic.pause(100);\n    recvBuf = pins.i2cReadBuffer(NFC_I2C_ADDR, len - 4);\n}\n\nfunction checkDcs(len: number): boolean {\n    let sum = 0, dcs = 0;\n    for (let i = 1; i < len - 2; i++) {\n        if ((i === 4) || (i === 5)) {\n            continue;\n        }\n        sum += recvBuf[i];\n    }\n    dcs = 0xFF - (sum & 0xFF);\n    if (dcs != recvBuf[len - 2]) {\n        return false;\n    }\n    return true;\n}\n\nfunction wakeup() {\n    basic.pause(100);\n    let i = 0;\n    let buf: number[] = [];\n    buf = [0x00, 0x00, 0xFF, 0x05, 0xFB, 0xD4, 0x14, 0x01, 0x14, 0x01, 0x02, 0x00];\n    let cmdWake = pins.createBufferFromArray(buf);\n    writeAndReadBuf(cmdWake, 14);\n    for (i = 0; i < ackBuf.length; i++) {\n        if (recvAck[1 + i] != ackBuf[i]) {\n            break;\n        }\n    }\n    if ((i != ackBuf.length) || (recvBuf[6] != 0xD5) || (recvBuf[7] != 0x15) || (!checkDcs(14 - 4))) {\n        NFC_ENABLE = 0;\n    } else {\n        NFC_ENABLE = 1;\n    }\n    basic.pause(100);\n}\n\n\n// Octopus MakeCode block definitions follow...\n\n//% block=\"RFID sensor IIC port Detect Card\"\n//% subcategory=Sensor group=\"IIC Port\"\nfunction checkCard(): string {\n    if (NFC_ENABLE === 0) {\n        wakeup();\n    }\n    let buf: number[] = [];\n    buf = [0x00, 0x00, 0xFF, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, 0x00];\n    let cmdUid = pins.createBufferFromArray(buf);\n    writeAndReadBuf(cmdUid, 24);\n    for (let i = 0; i < 4; i++) {\n        if (recvAck[1 + i] != ackBuf[i]) {\n            return '';\n        }\n    }\n    if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n        return '';\n    }\n    for (let i = 0; i < uId.length; i++) {\n        uId[i] = recvBuf[14 + i];\n    }\n    if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n        return '';\n    }\n\n    // Print the UID.\n    let uIdString = '';\n    for (let i = 0; i < uId.length; i++) {\n        uIdString += uId[i] + ' ';\n    }\n    serial.writeString('...');\n\n    return true;\n}\n\n\nserial.writeLine('Hello.');\nwhile (true) {\n    serial.writeLine('\\nChecking for card...');\n    if (checkCard()) {\n        serial.writeLine('YES.')\n        writeData('hello!')\n        basic.pause(1000);\n        serial.writeLine('\\n-  Attempting read...');\n        let text = ''\n        text = readDataBlock()\n        serial.writeLine('')\n        if (text.length == 0) {\n            serial.writeLine('-  NOTHING READ OR READ FAILED.')\n        } else {\n            serial.writeLine('-  Text is: ' + text)\n        }\n    } else {\n        serial.writeLine('CARD CHECK FAILED.');\n    }\n    serial.writeLine('-------------------')\n    basic.pause(1000);\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":3796,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":253,"start2":253,"length1":32,"length2":31}]}]},{"timestamp":1735448511769,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"1);\n"],[-1,"let NFC_ENABLE = 0;\n"],[0,"let "]],"start1":520,"start2":520,"length1":28,"length2":8},{"diffs":[[0,"6);\n"],[-1,"ackBuf[0] = 0x00;\nackBuf[1] = 0x00;\nackBuf[2] = 0xFF;\nackBuf[3] = 0x00;\nackBuf[4] = 0xFF;\nackBuf[5] = 0x00;\nlet uId = pins.createBuffer(4)"],[1,"let uId = pins.createBuffer(4);\nlet passwdBuf = pins.createBuffer(6);\nlet blockData = pins.createBuffer(16);\nlet NFC_ENABLE = 0;\nconst block_def = 1;\nackBuf[0] = 0x00;\nackBuf[1] = 0x00;\nackBuf[2] = 0xFF;\nackBuf[3] = 0x00;\nackBuf[4] = 0xFF;\nackBuf[5] = 0x00;\npasswdBuf[0] = 0xFF;\npasswdBuf[1] = 0xFF;\npasswdBuf[2] = 0xFF;\npasswdBuf[3] = 0xFF;\npasswdBuf[4] = 0xFF;\npasswdBuf[5] = 0xFF"],[0,";\n\nf"]],"start1":628,"start2":628,"length1":146,"length2":390},{"diffs":[[0,"\n\n//"],[-1,"% block=\"Get NFC ID"],[1," Octopus MakeCode block definitions follow...\n\n//% block=\"RFID sensor IIC port Detect Card\"\n//% subcategory=Sensor group=\"IIC Port"],[0,"\"\nfu"]],"start1":2162,"start2":2162,"length1":27,"length2":138},{"diffs":[[0,"nction check"],[-1,"For"],[0,"Card(): stri"]],"start1":2300,"start2":2300,"length1":27,"length2":24},{"diffs":[[0,"   }"],[-1,"\n\n    // Send command."],[0,"\n   "]],"start1":2376,"start2":2376,"length1":30,"length2":8},{"diffs":[[0,"24);"],[-1,"\n\n    // Check acknowledgment and status."],[0,"\n   "]],"start1":2565,"start2":2565,"length1":49,"length2":8},{"diffs":[[0,"   }"],[-1,"\n\n    // Assemble ID from buffer."],[0,"\n   "]],"start1":2761,"start2":2761,"length1":41,"length2":8},{"diffs":[[0,"   }"],[-1,"\n\n    // Final check for invalid ID."],[0,"\n   "]],"start1":2844,"start2":2844,"length1":44,"length2":8},{"diffs":[[0," // "],[-1,"Creat"],[1,"Print th"],[0,"e "],[1,"U"],[0,"ID"],[-1," string"],[0,".\n  "]],"start1":2968,"start2":2968,"length1":24,"length2":21},{"diffs":[[0,"    "],[-1,"return uIdString"],[1,"serial.writeString('...');\n\n    return true"],[0,";\n}\n"]],"start1":3095,"start2":3095,"length1":24,"length2":51},{"diffs":[[0,"    "],[-1,"let foundId = checkForCard();\n"],[1,"if (checkCard()) {\n        serial.writeLine('YES.')\n        writeData('hello!')\n        basic.pause(1000);\n        serial.writeLine('\\n-  Attempting read...');\n        let text = ''\n        text = readDataBlock()\n        serial.writeLine('')\n   "],[0,"    "],[1," "],[0,"if ("],[-1,"foundId != '') {\n"],[1,"text.length == 0) {\n    "],[0,"    "]],"start1":3239,"start2":3239,"length1":63,"length2":286},{"diffs":[[0,"ne('"],[-1,"CARD FOUND. UID is: ' + foundId)\n    } else {\n        serial.writeLine('NO CARD.');\n    }"],[1,"-  NOTHING READ OR READ FAILED.')\n        } else {\n            serial.writeLine('-  Text is: ' + text)\n        }\n    } else {\n        serial.writeLine('CARD CHECK FAILED.');\n    }\n    serial.writeLine('-------------------')"],[0,"\n   "]],"start1":3543,"start2":3543,"length1":97,"length2":231}]}]},{"timestamp":1735449109179,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"let "],[-1,"PN532_PREAMBLE = 0x00\nlet PN532_STARTCODE1 = 0x00\nlet PN532_STARTCODE2 = 0xFF\nlet PN532_POSTAM"],[1,"NFC_ENA"],[0,"BLE = 0"],[-1,"x00"],[1,";"],[0,"\nlet"]],"start1":524,"start2":524,"length1":112,"length2":23},{"diffs":[[0,"(4);"],[-1,"\nlet NFC_ENABLED = false;"],[0,"\n\nfu"]],"start1":787,"start2":787,"length1":33,"length2":8},{"diffs":[[0,"dReadBuf"],[-1,"fer"],[0,"(buf: Bu"]],"start1":809,"start2":809,"length1":19,"length2":16},{"diffs":[[0,"e(100);\n"],[-1,"\n"],[0,"    "],[-1,"// Send command."],[1,"let i = 0;"],[0,"\n    let"]],"start1":1404,"start2":1404,"length1":37,"length2":30},{"diffs":[[0," = ["],[-1,"PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2"],[1,"0x00, 0x00, 0xFF"],[0,", 0x"]],"start1":1462,"start2":1462,"length1":58,"length2":24},{"diffs":[[0,", 0x02, "],[-1,"PN532_POSTAMBLE"],[1,"0x00"],[0,"];\n    l"]],"start1":1524,"start2":1524,"length1":31,"length2":20},{"diffs":[[0,"teAndReadBuf"],[-1,"fer"],[0,"(cmdWake, 14"]],"start1":1597,"start2":1597,"length1":27,"length2":24},{"diffs":[[0,"14);"],[-1,"\n\n    // Check acknowledgement and status.\n    let i = 0;"],[0,"\n   "]],"start1":1619,"start2":1619,"length1":65,"length2":8},{"diffs":[[0,"ABLE"],[-1,"D"],[0," = "],[-1,"false"],[1,"0"],[0,";\n  "]],"start1":1861,"start2":1861,"length1":17,"length2":12},{"diffs":[[0,"ABLE"],[-1,"D"],[0," = "],[-1,"true"],[1,"1"],[0,";\n    }\n"],[-1,"\n"],[0,"    "]],"start1":1898,"start2":1898,"length1":25,"length2":20},{"diffs":[[0,"on check"],[1,"For"],[0,"Card"],[-1,"Id"],[0,"(): stri"]],"start1":1969,"start2":1969,"length1":22,"length2":23},{"diffs":[[0,"    if ("],[-1,"!"],[0,"NFC_ENAB"]],"start1":1997,"start2":1997,"length1":17,"length2":16},{"diffs":[[0,"C_ENABLE"],[-1,"D"],[1," === 0"],[0,") {\n    "]],"start1":2007,"start2":2007,"length1":17,"length2":22},{"diffs":[[0," = ["],[-1,"PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2"],[1,"0x00, 0x00, 0xFF"],[0,", 0x"]],"start1":2106,"start2":2106,"length1":58,"length2":24},{"diffs":[[0,"E1, "],[-1,"PN532_POSTAMBLE"],[1,"0x00"],[0,"];\n "]],"start1":2166,"start2":2166,"length1":23,"length2":12},{"diffs":[[0,"dReadBuf"],[-1,"fer"],[0,"(cmdUid,"]],"start1":2238,"start2":2238,"length1":19,"length2":16},{"diffs":[[0,"heck"],[1,"For"],[0,"Card"],[-1,"Id"],[0,"();\n"]],"start1":3034,"start2":3034,"length1":14,"length2":15}]}]},{"timestamp":1735449628986,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ely "],[-1,"adapt"],[1,"grabb"],[0,"ed f"]],"start1":391,"start2":391,"length1":13,"length2":13},{"diffs":[[0,"ck=\""],[-1,"Check NFC card"],[1,"Get NFC"],[0," ID\""]],"start1":2186,"start2":2186,"length1":22,"length2":15}]}]},{"timestamp":1735449774327,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"eCode ex"],[-1,"te"],[1,"pa"],[0,"nsion fo"]],"start1":11,"start2":11,"length1":18,"length2":18}]}]},{"timestamp":1735450857842,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ng a"],[-1,"n expansion"],[0," mod"]],"start1":80,"start2":80,"length1":19,"length2":8}]}]},{"timestamp":1735450861539,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"topus ex"],[-1,"te"],[1,"pa"],[0,"nsion at"]],"start1":421,"start2":421,"length1":18,"length2":18},{"diffs":[[0,"ts\n\n"],[-1,"//% color=50 weight=100 icon=\"\\uf1ec\" block=\"NFC\"\nnamespace NFC {\n\n    "],[0,"let "]],"start1":499,"start2":499,"length1":79,"length2":8},{"diffs":[[0," >> 1);\n"],[-1,"    "],[0,"let PN53"]],"start1":527,"start2":527,"length1":20,"length2":16},{"diffs":[[0,"PREAMBLE = 0x00\n"],[-1,"    "],[0,"let PN532_STARTC"]],"start1":545,"start2":545,"length1":36,"length2":32},{"diffs":[[0,"ODE1 = 0x00\n"],[-1,"    "],[0,"let PN532_ST"]],"start1":577,"start2":577,"length1":28,"length2":24},{"diffs":[[0," = 0xFF\n"],[-1,"    "],[0,"let PN53"]],"start1":609,"start2":609,"length1":20,"length2":16},{"diffs":[[0," = 0x00\n"],[-1,"    "],[0,"let recv"]],"start1":636,"start2":636,"length1":20,"length2":16},{"diffs":[[0,"er(32);\n"],[-1,"    "],[0,"let recv"]],"start1":673,"start2":673,"length1":20,"length2":16},{"diffs":[[0,"fer(8);\n"],[-1,"    "],[0,"let ackB"]],"start1":709,"start2":709,"length1":20,"length2":16},{"diffs":[[0,"fer(6);\n"],[-1,"    "],[0,"ackBuf[0"]],"start1":744,"start2":744,"length1":20,"length2":16},{"diffs":[[0,"[0] = 0x00;\n"],[-1,"    "],[0,"ackBuf[1] = "]],"start1":758,"start2":758,"length1":28,"length2":24},{"diffs":[[0,"[1] = 0x00;\n"],[-1,"    "],[0,"ackBuf[2] = "]],"start1":776,"start2":776,"length1":28,"length2":24},{"diffs":[[0,"[2] = 0xFF;\n"],[-1,"    "],[0,"ackBuf[3] = "]],"start1":794,"start2":794,"length1":28,"length2":24},{"diffs":[[0,"= 0x00;\n"],[-1,"    "],[0,"ackBuf[4"]],"start1":816,"start2":816,"length1":20,"length2":16},{"diffs":[[0,"= 0xFF;\n"],[-1,"    "],[0,"ackBuf[5"]],"start1":834,"start2":834,"length1":20,"length2":16},{"diffs":[[0,"= 0x00;\n"],[-1,"    "],[0,"let uId "]],"start1":852,"start2":852,"length1":20,"length2":16},{"diffs":[[0,"fer(4);\n"],[-1,"    "],[0,"let NFC_"]],"start1":884,"start2":884,"length1":20,"length2":16},{"diffs":[[0,"false;\n\n"],[-1,"    "],[0,"function"]],"start1":910,"start2":910,"length1":20,"length2":16},{"diffs":[[0,": number) {\n"],[-1,"    "],[0,"    pins.i2c"]],"start1":962,"start2":962,"length1":28,"length2":24},{"diffs":[[0,", buf);\n    "],[-1,"   "],[-1," "],[0,"basic.pause("]],"start1":1010,"start2":1010,"length1":28,"length2":24},{"diffs":[[0,"sic.pause(100);\n"],[-1,"    "],[0,"    recvAck = pi"]],"start1":1024,"start2":1024,"length1":36,"length2":32},{"diffs":[[0,"DR, 8);\n    "],[-1,"   "],[-1," "],[0,"basic.pause("]],"start1":1083,"start2":1083,"length1":28,"length2":24},{"diffs":[[0,"e(100);\n"],[-1,"    "],[0,"    recv"]],"start1":1105,"start2":1105,"length1":20,"length2":16},{"diffs":[[0,"n - 4);\n"],[-1,"    }\n\n    "],[1,"}\n\n"],[0,"function"]],"start1":1162,"start2":1162,"length1":27,"length2":19},{"diffs":[[0,"olean {\n    "],[-1,"   "],[-1," "],[0,"let sum = 0,"]],"start1":1207,"start2":1207,"length1":28,"length2":24},{"diffs":[[0,"0, dcs = 0;\n"],[-1,"    "],[0,"    for (let"]],"start1":1229,"start2":1229,"length1":28,"length2":24},{"diffs":[[0,") {\n        "],[-1,"   "],[-1," "],[0,"if ((i === 4"]],"start1":1277,"start2":1277,"length1":28,"length2":24},{"diffs":[[0,"        "],[-1,"    "],[0,"continue"]],"start1":1323,"start2":1323,"length1":20,"length2":16},{"diffs":[[0,"ue;\n        "],[-1,"   "],[-1," "],[0,"}\n"],[-1,"    "],[0,"        sum "]],"start1":1337,"start2":1337,"length1":34,"length2":26},{"diffs":[[0,"Buf[i];\n    "],[-1,"   "],[-1," "],[0,"}\n"],[-1,"    "],[0,"    dcs = 0x"]],"start1":1370,"start2":1370,"length1":34,"length2":26},{"diffs":[[0," 0xFF);\n    "],[-1,"   "],[-1," "],[0,"if (dcs != r"]],"start1":1407,"start2":1407,"length1":28,"length2":24},{"diffs":[[0,") {\n        "],[-1,"    "],[0,"return false"]],"start1":1446,"start2":1446,"length1":28,"length2":24},{"diffs":[[0," false;\n    "],[-1,"   "],[-1," "],[0,"}\n"],[-1,"    "],[0,"    return t"]],"start1":1464,"start2":1464,"length1":34,"length2":26},{"diffs":[[0,"n true;\n"],[-1,"    }\n\n    "],[1,"}\n\n"],[0,"function"]],"start1":1487,"start2":1487,"length1":27,"length2":19},{"diffs":[[0,"eup() {\n    "],[-1,"   "],[-1," "],[0,"basic.pause("]],"start1":1510,"start2":1510,"length1":28,"length2":24},{"diffs":[[0,"(100);\n\n    "],[-1,"   "],[-1," "],[0,"// Send comm"]],"start1":1533,"start2":1533,"length1":28,"length2":24},{"diffs":[[0,"nd command.\n    "],[-1,"  "],[-1,"  "],[0,"let buf: number["]],"start1":1550,"start2":1550,"length1":36,"length2":32},{"diffs":[[0," number[] = [];\n"],[-1,"    "],[0,"    buf = [PN532"]],"start1":1574,"start2":1574,"length1":36,"length2":32},{"diffs":[[0,"AMBLE];\n    "],[-1,"   "],[-1," "],[0,"let cmdWake "]],"start1":1711,"start2":1711,"length1":28,"length2":24},{"diffs":[[0,"FromArray(buf);\n"],[-1,"    "],[0,"    writeAndRead"]],"start1":1754,"start2":1754,"length1":36,"length2":32},{"diffs":[[0,"Wake, 14);\n\n    "],[-1,"   "],[-1," "],[0,"// Check acknowl"]],"start1":1796,"start2":1796,"length1":36,"length2":32},{"diffs":[[0,"and status.\n"],[-1,"    "],[0,"    let i = "]],"start1":1837,"start2":1837,"length1":28,"length2":24},{"diffs":[[0," i = 0;\n    "],[-1,"   "],[-1," "],[0,"for (i = 0; "]],"start1":1856,"start2":1856,"length1":28,"length2":24},{"diffs":[[0," i++) {\n        "],[-1,"    "],[0,"if (recvAck[1 + "]],"start1":1898,"start2":1898,"length1":36,"length2":32},{"diffs":[[0,"!= ackBuf[i]) {\n"],[-1,"    "],[0,"            brea"]],"start1":1933,"start2":1933,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1,"    }\n    "],[1,"}\n"],[0,"    }\n"],[-1,"    "],[0,"    if ("]],"start1":1968,"start2":1968,"length1":36,"length2":24},{"diffs":[[0," 4))) {\n        "],[-1,"    "],[0,"NFC_ENABLED = fa"]],"start1":2079,"start2":2079,"length1":36,"length2":32},{"diffs":[[0," false;\n"],[-1,"    "],[0,"    } el"]],"start1":2108,"start2":2108,"length1":20,"length2":16},{"diffs":[[0,"e;\n    } else {\n"],[-1,"    "],[0,"        NFC_ENAB"]],"start1":2113,"start2":2113,"length1":36,"length2":32},{"diffs":[[0,"= true;\n    "],[-1,"    }\n\n    "],[1,"}\n\n"],[0,"    basic.pa"]],"start1":2149,"start2":2149,"length1":35,"length2":27},{"diffs":[[0,"e(100);\n"],[-1,"    }\n\n\n    "],[1,"}\n\n\n"],[0,"//% bloc"]],"start1":2178,"start2":2178,"length1":28,"length2":20},{"diffs":[[0,"ID\"\n"],[-1,"    export "],[0,"func"]],"start1":2216,"start2":2216,"length1":19,"length2":8},{"diffs":[[0,"tring {\n"],[-1,"    "],[0,"    if ("]],"start1":2245,"start2":2245,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1," "],[-1,"   "],[0,"wakeup()"]],"start1":2277,"start2":2277,"length1":20,"length2":16},{"diffs":[[0,"  wakeup();\n"],[-1,"    "],[0,"    }\n\n     "]],"start1":2283,"start2":2283,"length1":28,"length2":24},{"diffs":[[0," }\n\n    "],[-1," "],[-1,"   "],[0,"// Send "]],"start1":2298,"start2":2298,"length1":20,"length2":16},{"diffs":[[0,"ommand.\n"],[-1,"    "],[0,"    let "]],"start1":2315,"start2":2315,"length1":20,"length2":16},{"diffs":[[0,"[];\n    "],[-1," "],[-1,"   "],[0,"buf = [P"]],"start1":2347,"start2":2347,"length1":20,"length2":16},{"diffs":[[0,"AMBLE];\n"],[-1,"    "],[0,"    let "]],"start1":2466,"start2":2466,"length1":20,"length2":16},{"diffs":[[0,"f);\n    "],[-1," "],[-1,"   "],[0,"writeAnd"]],"start1":2520,"start2":2520,"length1":20,"length2":16},{"diffs":[[0,", 24);\n\n    "],[-1," "],[-1,"   "],[0,"// Check ack"]],"start1":2553,"start2":2553,"length1":28,"length2":24},{"diffs":[[0,"status.\n    "],[-1," "],[-1,"   "],[0,"for (let i ="]],"start1":2593,"start2":2593,"length1":28,"length2":24},{"diffs":[[0,"; i < 4; i++) {\n"],[-1,"    "],[0,"        if (recv"]],"start1":2619,"start2":2619,"length1":36,"length2":32},{"diffs":[[0,") {\n            "],[-1," "],[-1,"   "],[0,"return '';\n     "]],"start1":2674,"start2":2674,"length1":36,"length2":32},{"diffs":[[0,"    "],[-1,"    "],[0,"}\n    "],[-1," "],[-1,"   }\n    "],[1,"}\n"],[0,"    "]],"start1":2705,"start2":2705,"length1":28,"length2":16},{"diffs":[[0," 4))) {\n        "],[-1,"    "],[0,"return '';\n     "]],"start1":2764,"start2":2764,"length1":36,"length2":32},{"diffs":[[0,"     return '';\n"],[-1,"    "],[0,"    }\n\n        /"]],"start1":2775,"start2":2775,"length1":36,"length2":32},{"diffs":[[0," }\n\n    "],[-1," "],[-1,"   "],[0,"// Assem"]],"start1":2794,"start2":2794,"length1":20,"length2":16},{"diffs":[[0,"buffer.\n"],[-1,"    "],[0,"    for "]],"start1":2822,"start2":2822,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1," "],[-1,"   "],[0,"uId[i] ="]],"start1":2873,"start2":2873,"length1":20,"length2":16},{"diffs":[[0,"4 + i];\n"],[-1,"    "],[0,"    }\n\n "]],"start1":2899,"start2":2899,"length1":20,"length2":16},{"diffs":[[0," }\n\n    "],[-1," "],[-1,"   "],[0,"// Final"]],"start1":2910,"start2":2910,"length1":20,"length2":16},{"diffs":[[0,"lid ID.\n"],[-1,"    "],[0,"    if ("]],"start1":2941,"start2":2941,"length1":20,"length2":16},{"diffs":[[0,"0xFF) {\n        "],[-1,"    "],[0,"return '';\n     "]],"start1":3031,"start2":3031,"length1":36,"length2":32},{"diffs":[[0," return '';\n"],[-1,"    "],[0,"    }\n\n     "]],"start1":3046,"start2":3046,"length1":28,"length2":24},{"diffs":[[0," }\n\n    "],[-1," "],[-1,"   "],[0,"// Creat"]],"start1":3061,"start2":3061,"length1":20,"length2":16},{"diffs":[[0,"string.\n    "],[-1," "],[-1,"   "],[0,"let uIdStrin"]],"start1":3082,"start2":3082,"length1":28,"length2":24},{"diffs":[[0,"'';\n    "],[-1," "],[-1,"   "],[0,"for (let"]],"start1":3110,"start2":3110,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1,"    "],[0,"uIdStrin"]],"start1":3157,"start2":3157,"length1":20,"length2":16},{"diffs":[[0," + ' ';\n    "],[-1," "],[-1,"   }\n    "],[1,"}\n"],[0,"    return u"]],"start1":3184,"start2":3184,"length1":34,"length2":26},{"diffs":[[0,"ng;\n"],[-1,"    }\n\n\n    // Testing code.\n    "],[1,"}\n\n\n"],[0,"seri"]],"start1":3216,"start2":3216,"length1":41,"length2":12},{"diffs":[[0,"llo.');\n"],[-1,"    "],[0,"while (t"]],"start1":3244,"start2":3244,"length1":20,"length2":16},{"diffs":[[0,"le (true) {\n"],[-1,"    "],[0,"    serial.w"]],"start1":3255,"start2":3255,"length1":28,"length2":24},{"diffs":[[0," card...');\n"],[-1,"    "],[0,"    let foun"]],"start1":3303,"start2":3303,"length1":28,"length2":24},{"diffs":[[0,"rdId();\n"],[-1,"    "],[0,"    if ("]],"start1":3340,"start2":3340,"length1":20,"length2":16},{"diffs":[[0,"Id != '') {\n"],[-1,"    "],[0,"        seri"]],"start1":3361,"start2":3361,"length1":28,"length2":24},{"diffs":[[0,"oundId)\n"],[-1,"    "],[0,"    } el"]],"start1":3424,"start2":3424,"length1":20,"length2":16},{"diffs":[[0,"   } else {\n"],[-1,"    "],[0,"        seri"]],"start1":3433,"start2":3433,"length1":28,"length2":24},{"diffs":[[0,"ARD.');\n    "],[-1,"    }\n    "],[1,"}\n"],[0,"    basic.pa"]],"start1":3475,"start2":3475,"length1":34,"length2":26},{"diffs":[[0,"0);\n"],[-1,"    }\n\n}\n"],[1,"}"],[0,"\n"]],"start1":3508,"start2":3508,"length1":14,"length2":6}]}]},{"timestamp":1735451358667,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ts\n\n"],[-1,"/**\n * Provides access to limited functionality of a PN532 NFC device.\n */\n"],[0,"//% "]],"start1":499,"start2":499,"length1":83,"length2":8},{"diffs":[[0,"weight=1"],[1,"00"],[0," icon=\"\\"]],"start1":516,"start2":516,"length1":16,"length2":18},{"diffs":[[0,"con=\"\\uf"],[1,"1ec"],[0,"\" block="]],"start1":528,"start2":528,"length1":16,"length2":19},{"diffs":[[0," }\n\n"],[-1,"    /**\n     * Check for an NFC card/chip and get its ID. Gets an empty string if nothing is found.\n     * @returns {string} The card's ID as four decimal numbers separated by spaces.\n    */"],[0,"\n   "]],"start1":2484,"start2":2484,"length1":198,"length2":8}]}]},{"timestamp":1735451957590,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\"\\uf"],[-1,"02b"],[0,"\" bl"]],"start1":605,"start2":605,"length1":11,"length2":8},{"diffs":[[0,"d[i]"],[-1,";\n            if (i < uId.length - 1) {\n                uIdString"],[0," +"],[-1,"="],[0," ' ';\n"],[-1,"            }\n"],[0,"    "]],"start1":3870,"start2":3870,"length1":96,"length2":16}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"C ex"],[-1,"te"],[1,"pa"],[0,"nsio"]],"start1":21,"start2":21,"length1":10,"length2":10}]}]},{"timestamp":1735452518928,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," block=\""],[-1,"Get"],[1,"Check"],[0," NFC car"]],"start1":2759,"start2":2759,"length1":19,"length2":21},{"diffs":[[0,"unction "],[-1,"get"],[1,"check"],[0,"CardId()"]],"start1":2798,"start2":2798,"length1":19,"length2":21},{"diffs":[[0,"}\n\n\n"],[-1,"    /**\n     * Check for an NFC card/chip and check wether it has a matching ID.\n     * @returns {boolean} True if an NFC card is found and its ID matches the given four numbers.\n    */\n    //% block=\"NFC card ID matches\"\n    export function checkCardId(firstNumber: number, secondNumber: number, thirdNumber: number, fourthNumber: number): boolean {\n        if (!NFC_ENABLED) {\n            wakeup();\n        }\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, PN532_POSTAMBLE];\n        let cmdUid = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdUid, 24);\n\n        // Check acknowledgment and status.\n        for (let i = 0; i < 4; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                return false;\n            }\n        }\n        if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n            return false;\n        }\n\n        // Assemble ID from buffer.\n        for (let i = 0; i < uId.length; i++) {\n            uId[i] = recvBuf[14 + i];\n        }\n\n        // Final check for invalid ID.\n        if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n            return false;\n        }\n\n        if (uId[0] == firstNumber && uId[1] == secondNumber && uId[2] == thirdNumber && uId[3] == fourthNumber) {\n            return true;\n        }\n\n        return false;\n    }\n\n"],[0,"    "]],"start1":4005,"start2":4005,"length1":1459,"length2":8}]}]},{"timestamp":1735452923483,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// This MakeCode extension for micro:bit allows identification of RFID cards using an expansion module with a PN532.\n// It should work with:\n// - DFRobot Gravity module (https://wiki.dfrobot.com/Gravity:%20I2C%20&%20UART%20NFC%20Module%20SKU:%20DFR0231-H#target_5)\n// - Elecfreaks Octopus module (https://wiki.elecfreaks.com/en/microbit/sensor/octopus-sensors/sensor/octopus_ef04105)\n//\n// Code is largely adapted from Octopus extension at https://github.com/elecfreaks/pxt-octopus/blob/master/main.ts\n\n/**\n * Provides access to limited functionality of a PN532 NFC device.\n */\n//% color=50 weight=1 icon=\"\\uf02b\" block=\"NFC1\"\nnamespace NFC1 {\n\n    let NFC_I2C_ADDR = (0x48 >> 1);\n    let PN532_PREAMBLE = 0x00\n    let PN532_STARTCODE1 = 0x00\n    let PN532_STARTCODE2 = 0xFF\n    let PN532_POSTAMBLE = 0x00\n    let recvBuf = pins.createBuffer(32);\n    let recvAck = pins.createBuffer(8);\n    let ackBuf = pins.createBuffer(6);\n    ackBuf[0] = 0x00;\n    ackBuf[1] = 0x00;\n    ackBuf[2] = 0xFF;\n    ackBuf[3] = 0x00;\n    ackBuf[4] = 0xFF;\n    ackBuf[5] = 0x00;\n    let uId = pins.createBuffer(4);\n    let NFC_ENABLED = false;\n\n    function writeAndReadBuffer(buf: Buffer, len: number) {\n        pins.i2cWriteBuffer(NFC_I2C_ADDR, buf);\n        basic.pause(100);\n        recvAck = pins.i2cReadBuffer(NFC_I2C_ADDR, 8);\n        basic.pause(100);\n        recvBuf = pins.i2cReadBuffer(NFC_I2C_ADDR, len - 4);\n    }\n\n    function checkDcs(len: number): boolean {\n        let sum = 0, dcs = 0;\n        for (let i = 1; i < len - 2; i++) {\n            if ((i === 4) || (i === 5)) {\n                continue;\n            }\n            sum += recvBuf[i];\n        }\n        dcs = 0xFF - (sum & 0xFF);\n        if (dcs != recvBuf[len - 2]) {\n            return false;\n        }\n        return true;\n    }\n\n    function wakeup() {\n        basic.pause(100);\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x05, 0xFB, 0xD4, 0x14, 0x01, 0x14, 0x01, 0x02, PN532_POSTAMBLE];\n        let cmdWake = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdWake, 14);\n\n        // Check acknowledgement and status.\n        let i = 0;\n        for (i = 0; i < ackBuf.length; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                break;\n            }\n        }\n        if ((i != ackBuf.length) || (recvBuf[6] != 0xD5) || (recvBuf[7] != 0x15) || (!checkDcs(14 - 4))) {\n            NFC_ENABLED = false;\n        } else {\n            NFC_ENABLED = true;\n        }\n\n        basic.pause(100);\n    }\n\n    /**\n     * Check for an NFC card/chip and get its ID as a string. Gets an empty string if nothing is found.\n    */\n    //% block=\"Get NFC card ID\"\n    //% weight=20\n    export function getCardId(): string {\n        if (!NFC_ENABLED) {\n            wakeup();\n        }\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, PN532_POSTAMBLE];\n        let cmdUid = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdUid, 24);\n\n        // Check acknowledgment and status.\n        for (let i = 0; i < 4; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                return '';\n            }\n        }\n        if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n            return '';\n        }\n\n        // Assemble ID from buffer.\n        for (let i = 0; i < uId.length; i++) {\n            uId[i] = recvBuf[14 + i];\n        }\n\n        // Final check for invalid ID.\n        if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n            return '';\n        }\n\n        // Create ID string.\n        let uIdString = '';\n        for (let i = 0; i < uId.length; i++) {\n            uIdString += uId[i];\n            if (i < uId.length - 1) {\n                uIdString += ' ';\n            }\n        }\n        return uIdString;\n    }\n\n\n    /**\n     * Check for an NFC card/chip and then check whether it has a matching ID.\n    */\n    //% block=\"NFC card ID matches $firstNum $secondNum $thirdNum $fourthNum\"\n    //% weight=10\n    export function checkCardId(firstNum: number, secondNum: number, thirdNum: number, fourthNum: number): boolean {\n        if (!NFC_ENABLED) {\n            wakeup();\n        }\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, PN532_POSTAMBLE];\n        let cmdUid = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdUid, 24);\n\n        // Check acknowledgment and status.\n        for (let i = 0; i < 4; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                return false;\n            }\n        }\n        if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n            return false;\n        }\n\n        // Assemble ID from buffer.\n        for (let i = 0; i < uId.length; i++) {\n            uId[i] = recvBuf[14 + i];\n        }\n\n        // Final check for invalid ID.\n        if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n            return false;\n        }\n\n        if (uId[0] == firstNum && uId[1] == secondNum && uId[2] == thirdNum && uId[3] == fourthNum) {\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\n"],[0,"// T"]],"start1":0,"start2":0,"length1":5355,"length2":4}]}]},{"timestamp":1735454423125,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n    }\n\n"],[1,"}\n\n"],[0,"// This "]],"start1":5340,"start2":5340,"length1":16,"length2":19}]}]},{"timestamp":1735454425505,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  * "],[-1,"Get a card/chip'"],[1,"Check for an NFC card/chip and get it"],[0,"s ID"]],"start1":2574,"start2":2574,"length1":24,"length2":45},{"diffs":[[0,"ng if no"],[-1," card/chip"],[1,"thing"],[0," is foun"]],"start1":2651,"start2":2651,"length1":26,"length2":21},{"diffs":[[0," */\n"],[-1,"    //% blockId=getCardId\n"],[0,"    "]],"start1":2678,"start2":2678,"length1":34,"length2":8},{"diffs":[[0," */\n"],[-1,"    //% blockId=validateCardId\n"],[0,"    "]],"start1":4043,"start2":4043,"length1":39,"length2":8},{"diffs":[[0,"=10\n"],[-1,"    //% inlineInputMode=inline\n"],[0,"    "]],"start1":4139,"start2":4139,"length1":39,"length2":8},{"diffs":[[0,"ion "],[-1,"validate"],[1,"check"],[0,"Card"]],"start1":4159,"start2":4159,"length1":16,"length2":13},{"diffs":[[0," }\n\n"],[-1,"    /**\n     * Check for an NFC card/chip and then check whether it has a matching ID.\n    */\n    //% blockId=checkForCard\n    //% block=\"Card present\"\n    //% weight=30"],[1,"// This MakeCode extension for micro:bit allows identification of RFID cards using an expansion module with a PN532.\n// It should work with:\n// - DFRobot Gravity module (https://wiki.dfrobot.com/Gravity:%20I2C%20&%20UART%20NFC%20Module%20SKU:%20DFR0231-H#target_5)\n// - Elecfreaks Octopus module (https://wiki.elecfreaks.com/en/microbit/sensor/octopus-sensors/sensor/octopus_ef04105)\n//\n// Code is largely adapted from Octopus extension at https://github.com/elecfreaks/pxt-octopus/blob/master/main.ts\n\n/**\n * Provides access to limited functionality of a PN532 NFC device.\n */\n//% color=50 weight=1 icon=\"\\uf02b\" block=\"NFC\"\nnamespace NFC {\n\n    let NFC_I2C_ADDR = (0x48 >> 1);\n    let PN532_PREAMBLE = 0x00\n    let PN532_STARTCODE1 = 0x00\n    let PN532_STARTCODE2 = 0xFF\n    let PN532_POSTAMBLE = 0x00\n    let recvBuf = pins.createBuffer(32);\n    let recvAck = pins.createBuffer(8);\n    let ackBuf = pins.createBuffer(6);\n    ackBuf[0] = 0x00;\n    ackBuf[1] = 0x00;\n    ackBuf[2] = 0xFF;\n    ackBuf[3] = 0x00;\n    ackBuf[4] = 0xFF;\n    ackBuf[5] = 0x00;\n    let uId = pins.createBuffer(4);\n    let NFC_ENABLED = false;\n\n    function writeAndReadBuffer(buf: Buffer, len: number) {\n        pins.i2cWriteBuffer(NFC_I2C_ADDR, buf);\n        basic.pause(100);\n        recvAck = pins.i2cReadBuffer(NFC_I2C_ADDR, 8);\n        basic.pause(100);\n        recvBuf = pins.i2cReadBuffer(NFC_I2C_ADDR, len - 4);\n    }\n\n    function checkDcs(len: number): boolean {\n        let sum = 0, dcs = 0;\n        for (let i = 1; i < len - 2; i++) {\n            if ((i === 4) || (i === 5)) {\n                continue;\n            }\n            sum += recvBuf[i];\n        }\n        dcs = 0xFF - (sum & 0xFF);\n        if (dcs != recvBuf[len - 2]) {\n            return false;\n        }\n        return true;\n    }\n\n    function wakeup() {\n        basic.pause(100);\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x05, 0xFB, 0xD4, 0x14, 0x01, 0x14, 0x01, 0x02, PN532_POSTAMBLE];\n        let cmdWake = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdWake, 14);\n\n        // Check acknowledgement and status.\n        let i = 0;\n        for (i = 0; i < ackBuf.length; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                break;\n            }\n        }\n        if ((i != ackBuf.length) || (recvBuf[6] != 0xD5) || (recvBuf[7] != 0x15) || (!checkDcs(14 - 4))) {\n            NFC_ENABLED = false;\n        } else {\n            NFC_ENABLED = true;\n        }\n\n        basic.pause(100);\n    }\n\n    /**\n     * Check for an NFC card/chip and get its ID. Gets an empty string if nothing is found.\n     * @returns {string} The card's ID as four decimal numbers separated by spaces.\n    */\n    //% block=\"Get NFC card ID\"\n    export function getCardId(): string {\n        if (!NFC_ENABLED) {\n            wakeup();\n        }\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, PN532_POSTAMBLE];\n        let cmdUid = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdUid, 24);\n\n        // Check acknowledgment and status.\n        for (let i = 0; i < 4; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                return '';\n            }\n        }\n        if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n            return '';\n        }\n\n        // Assemble ID from buffer.\n        for (let i = 0; i < uId.length; i++) {\n            uId[i] = recvBuf[14 + i];\n        }\n\n        // Final check for invalid ID.\n        if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n            return '';\n        }\n\n        // Create ID string.\n        let uIdString = '';\n        for (let i = 0; i < uId.length; i++) {\n            uIdString += uId[i];\n            if (i < uId.length - 1) {\n                uIdString += ' ';\n            }\n        }\n        return uIdString;\n    }\n\n\n    /**\n     * Check for an NFC card/chip and check wether it has a matching ID.\n     * @returns {boolean} True if an NFC card is found and its ID matches the given four numbers.\n    */\n    //% block=\"NFC card ID matches\""],[0,"\n   "]],"start1":5344,"start2":5344,"length1":177,"length2":4234},{"diffs":[[0,"heck"],[-1,"For"],[0,"Card"],[-1,"("],[1,"Id(firstNumber: number, secondNumber: number, thirdNumber: number, fourthNumber: number"],[0,"): b"]],"start1":9596,"start2":9596,"length1":16,"length2":99},{"diffs":[[0," }\n\n        "],[-1,"return tru"],[1,"if (uId[0] == firstNumber && uId[1] == secondNumber && uId[2] == thirdNumber && uId[3] == fourthNumber) {\n            return true;\n        }\n\n        return fals"],[0,"e;\n    }\n\n\n "]],"start1":10621,"start2":10621,"length1":34,"length2":185},{"diffs":[[0,"lse;\n    }\n\n"],[-1,"\n"],[0,"    // Testi"]],"start1":10792,"start2":10792,"length1":25,"length2":24},{"diffs":[[0,"undId = "],[-1,"get"],[1,"check"],[0,"CardId()"]],"start1":10942,"start2":10942,"length1":19,"length2":21}]}]},{"timestamp":1735454932875,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":114}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":248,"start2":248,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1735447922799,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"i2c NFC expansion prototyping\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1735449740435,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"// This MakeCode expansion for micro:bit allows identification of RFID cards using a module with a PN532.\n// It should work with:\n// - DFRobot Gravity module (https://wiki.dfrobot.com/Gravity:%20I2C%20&%20UART%20NFC%20Module%20SKU:%20DFR0231-H#target_5)\n// - Elecfreaks Octopus module (https://wiki.elecfreaks.com/en/microbit/sensor/octopus-sensors/sensor/octopus_ef04105)\n//\n// Code is largely grabbed from Octopus expansion at https://github.com/elecfreaks/pxt-octopus/blob/master/main.ts\n\nlet NFC_I2C_ADDR = (0x48 >> 1);\nlet PN532_PREAMBLE = 0x00\nlet PN532_STARTCODE1 = 0x00\nlet PN532_STARTCODE2 = 0xFF\nlet PN532_POSTAMBLE = 0x00\nlet recvBuf = pins.createBuffer(32);\nlet recvAck = pins.createBuffer(8);\nlet ackBuf = pins.createBuffer(6);\nackBuf[0] = 0x00;\nackBuf[1] = 0x00;\nackBuf[2] = 0xFF;\nackBuf[3] = 0x00;\nackBuf[4] = 0xFF;\nackBuf[5] = 0x00;\nlet uId = pins.createBuffer(4);\nlet NFC_ENABLED = false;\n\nfunction writeAndReadBuffer(buf: Buffer, len: number) {\n    pins.i2cWriteBuffer(NFC_I2C_ADDR, buf);\n    basic.pause(100);\n    recvAck = pins.i2cReadBuffer(NFC_I2C_ADDR, 8);\n    basic.pause(100);\n    recvBuf = pins.i2cReadBuffer(NFC_I2C_ADDR, len - 4);\n}\n\nfunction checkDcs(len: number): boolean {\n    let sum = 0, dcs = 0;\n    for (let i = 1; i < len - 2; i++) {\n        if ((i === 4) || (i === 5)) {\n            continue;\n        }\n        sum += recvBuf[i];\n    }\n    dcs = 0xFF - (sum & 0xFF);\n    if (dcs != recvBuf[len - 2]) {\n        return false;\n    }\n    return true;\n}\n\nfunction wakeup() {\n    basic.pause(100);\n\n    // Send command.\n    let buf: number[] = [];\n    buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x05, 0xFB, 0xD4, 0x14, 0x01, 0x14, 0x01, 0x02, PN532_POSTAMBLE];\n    let cmdWake = pins.createBufferFromArray(buf);\n    writeAndReadBuffer(cmdWake, 14);\n\n    // Check acknowledgement and status.\n    let i = 0;\n    for (i = 0; i < ackBuf.length; i++) {\n        if (recvAck[1 + i] != ackBuf[i]) {\n            break;\n        }\n    }\n    if ((i != ackBuf.length) || (recvBuf[6] != 0xD5) || (recvBuf[7] != 0x15) || (!checkDcs(14 - 4))) {\n        NFC_ENABLED = false;\n    } else {\n        NFC_ENABLED = true;\n    }\n\n    basic.pause(100);\n}\n\n\n//% block=\"Check NFC card ID\"\nfunction checkCardId(): string {\n    if (!NFC_ENABLED) {\n        wakeup();\n    }\n\n    // Send command.\n    let buf: number[] = [];\n    buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, PN532_POSTAMBLE];\n    let cmdUid = pins.createBufferFromArray(buf);\n    writeAndReadBuffer(cmdUid, 24);\n\n    // Check acknowledgment and status.\n    for (let i = 0; i < 4; i++) {\n        if (recvAck[1 + i] != ackBuf[i]) {\n            return '';\n        }\n    }\n    if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n        return '';\n    }\n\n    // Assemble ID from buffer.\n    for (let i = 0; i < uId.length; i++) {\n        uId[i] = recvBuf[14 + i];\n    }\n\n    // Final check for invalid ID.\n    if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n        return '';\n    }\n\n    // Create ID string.\n    let uIdString = '';\n    for (let i = 0; i < uId.length; i++) {\n        uIdString += uId[i] + ' ';\n    }\n    return uIdString;\n}\n\n\nserial.writeLine('Hello.');\nwhile (true) {\n    serial.writeLine('\\nChecking for card...');\n    let foundId = checkCardId();\n    if (foundId != '') {\n        serial.writeLine('CARD FOUND. UID is: ' + foundId)\n    } else {\n        serial.writeLine('NO CARD.');\n    }\n    basic.pause(1000);\n}\n","README.md":"","pxt.json":"{\n    \"name\": \"i2c NFC expansion prototyping\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1735451569428,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"// This MakeCode extension for micro:bit allows identification of RFID cards using an expansion module with a PN532.\n// It should work with:\n// - DFRobot Gravity module (https://wiki.dfrobot.com/Gravity:%20I2C%20&%20UART%20NFC%20Module%20SKU:%20DFR0231-H#target_5)\n// - Elecfreaks Octopus module (https://wiki.elecfreaks.com/en/microbit/sensor/octopus-sensors/sensor/octopus_ef04105)\n//\n// Code is largely adapted from Octopus extension at https://github.com/elecfreaks/pxt-octopus/blob/master/main.ts\n\n//% color=50 weight=100 icon=\"\\uf1ec\" block=\"NFC\"\nnamespace NFC {\n\n    let NFC_I2C_ADDR = (0x48 >> 1);\n    let PN532_PREAMBLE = 0x00\n    let PN532_STARTCODE1 = 0x00\n    let PN532_STARTCODE2 = 0xFF\n    let PN532_POSTAMBLE = 0x00\n    let recvBuf = pins.createBuffer(32);\n    let recvAck = pins.createBuffer(8);\n    let ackBuf = pins.createBuffer(6);\n    ackBuf[0] = 0x00;\n    ackBuf[1] = 0x00;\n    ackBuf[2] = 0xFF;\n    ackBuf[3] = 0x00;\n    ackBuf[4] = 0xFF;\n    ackBuf[5] = 0x00;\n    let uId = pins.createBuffer(4);\n    let NFC_ENABLED = false;\n\n    function writeAndReadBuffer(buf: Buffer, len: number) {\n        pins.i2cWriteBuffer(NFC_I2C_ADDR, buf);\n        basic.pause(100);\n        recvAck = pins.i2cReadBuffer(NFC_I2C_ADDR, 8);\n        basic.pause(100);\n        recvBuf = pins.i2cReadBuffer(NFC_I2C_ADDR, len - 4);\n    }\n\n    function checkDcs(len: number): boolean {\n        let sum = 0, dcs = 0;\n        for (let i = 1; i < len - 2; i++) {\n            if ((i === 4) || (i === 5)) {\n                continue;\n            }\n            sum += recvBuf[i];\n        }\n        dcs = 0xFF - (sum & 0xFF);\n        if (dcs != recvBuf[len - 2]) {\n            return false;\n        }\n        return true;\n    }\n\n    function wakeup() {\n        basic.pause(100);\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x05, 0xFB, 0xD4, 0x14, 0x01, 0x14, 0x01, 0x02, PN532_POSTAMBLE];\n        let cmdWake = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdWake, 14);\n\n        // Check acknowledgement and status.\n        let i = 0;\n        for (i = 0; i < ackBuf.length; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                break;\n            }\n        }\n        if ((i != ackBuf.length) || (recvBuf[6] != 0xD5) || (recvBuf[7] != 0x15) || (!checkDcs(14 - 4))) {\n            NFC_ENABLED = false;\n        } else {\n            NFC_ENABLED = true;\n        }\n\n        basic.pause(100);\n    }\n\n    /**\n     * Check for an NFC card/chip and get its ID.\n     * @return \n    */\n    //% block=\"Check NFC card ID\"\n    export function checkCardId(): string {\n        if (!NFC_ENABLED) {\n            wakeup();\n        }\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, PN532_POSTAMBLE];\n        let cmdUid = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdUid, 24);\n\n        // Check acknowledgment and status.\n        for (let i = 0; i < 4; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                return '';\n            }\n        }\n        if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n            return '';\n        }\n\n        // Assemble ID from buffer.\n        for (let i = 0; i < uId.length; i++) {\n            uId[i] = recvBuf[14 + i];\n        }\n\n        // Final check for invalid ID.\n        if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n            return '';\n        }\n\n        // Create ID string.\n        let uIdString = '';\n        for (let i = 0; i < uId.length; i++) {\n            uIdString += uId[i] + ' ';\n        }\n        return uIdString;\n    }\n\n\n    // Testing code.\n    serial.writeLine('Hello.');\n    while (true) {\n        serial.writeLine('\\nChecking for card...');\n        let foundId = checkCardId();\n        if (foundId != '') {\n            serial.writeLine('CARD FOUND. UID is: ' + foundId)\n        } else {\n            serial.writeLine('NO CARD.');\n        }\n        basic.pause(1000);\n    }\n\n}\n\n","README.md":"","pxt.json":"{\n    \"name\": \"i2c NFC expansion prototyping\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1735454423125,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"// This MakeCode extension for micro:bit allows identification of RFID cards using an expansion module with a PN532.\n// It should work with:\n// - DFRobot Gravity module (https://wiki.dfrobot.com/Gravity:%20I2C%20&%20UART%20NFC%20Module%20SKU:%20DFR0231-H#target_5)\n// - Elecfreaks Octopus module (https://wiki.elecfreaks.com/en/microbit/sensor/octopus-sensors/sensor/octopus_ef04105)\n//\n// Code is largely adapted from Octopus extension at https://github.com/elecfreaks/pxt-octopus/blob/master/main.ts\n\n/**\n * Provides access to limited functionality of a PN532 NFC device.\n */\n//% color=50 weight=1 icon=\"\\uf02b\" block=\"NFC\"\nnamespace NFC {\n\n    let NFC_I2C_ADDR = (0x48 >> 1);\n    let PN532_PREAMBLE = 0x00\n    let PN532_STARTCODE1 = 0x00\n    let PN532_STARTCODE2 = 0xFF\n    let PN532_POSTAMBLE = 0x00\n    let recvBuf = pins.createBuffer(32);\n    let recvAck = pins.createBuffer(8);\n    let ackBuf = pins.createBuffer(6);\n    ackBuf[0] = 0x00;\n    ackBuf[1] = 0x00;\n    ackBuf[2] = 0xFF;\n    ackBuf[3] = 0x00;\n    ackBuf[4] = 0xFF;\n    ackBuf[5] = 0x00;\n    let uId = pins.createBuffer(4);\n    let NFC_ENABLED = false;\n\n    function writeAndReadBuffer(buf: Buffer, len: number) {\n        pins.i2cWriteBuffer(NFC_I2C_ADDR, buf);\n        basic.pause(100);\n        recvAck = pins.i2cReadBuffer(NFC_I2C_ADDR, 8);\n        basic.pause(100);\n        recvBuf = pins.i2cReadBuffer(NFC_I2C_ADDR, len - 4);\n    }\n\n    function checkDcs(len: number): boolean {\n        let sum = 0, dcs = 0;\n        for (let i = 1; i < len - 2; i++) {\n            if ((i === 4) || (i === 5)) {\n                continue;\n            }\n            sum += recvBuf[i];\n        }\n        dcs = 0xFF - (sum & 0xFF);\n        if (dcs != recvBuf[len - 2]) {\n            return false;\n        }\n        return true;\n    }\n\n    function wakeup() {\n        basic.pause(100);\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x05, 0xFB, 0xD4, 0x14, 0x01, 0x14, 0x01, 0x02, PN532_POSTAMBLE];\n        let cmdWake = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdWake, 14);\n\n        // Check acknowledgement and status.\n        let i = 0;\n        for (i = 0; i < ackBuf.length; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                break;\n            }\n        }\n        if ((i != ackBuf.length) || (recvBuf[6] != 0xD5) || (recvBuf[7] != 0x15) || (!checkDcs(14 - 4))) {\n            NFC_ENABLED = false;\n        } else {\n            NFC_ENABLED = true;\n        }\n\n        basic.pause(100);\n    }\n\n    /**\n     * Check for an NFC card/chip and get its ID. Gets an empty string if nothing is found.\n     * @returns {string} The card's ID as four decimal numbers separated by spaces.\n    */\n    //% block=\"Get NFC card ID\"\n    export function getCardId(): string {\n        if (!NFC_ENABLED) {\n            wakeup();\n        }\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, PN532_POSTAMBLE];\n        let cmdUid = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdUid, 24);\n\n        // Check acknowledgment and status.\n        for (let i = 0; i < 4; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                return '';\n            }\n        }\n        if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n            return '';\n        }\n\n        // Assemble ID from buffer.\n        for (let i = 0; i < uId.length; i++) {\n            uId[i] = recvBuf[14 + i];\n        }\n\n        // Final check for invalid ID.\n        if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n            return '';\n        }\n\n        // Create ID string.\n        let uIdString = '';\n        for (let i = 0; i < uId.length; i++) {\n            uIdString += uId[i];\n            if (i < uId.length - 1) {\n                uIdString += ' ';\n            }\n        }\n        return uIdString;\n    }\n\n\n    /**\n     * Check for an NFC card/chip and check wether it has a matching ID.\n     * @returns {boolean} True if an NFC card is found and its ID matches the given four numbers.\n    */\n    //% block=\"NFC card ID matches\"\n    export function checkCardId(firstNumber: number, secondNumber: number, thirdNumber: number, fourthNumber: number): boolean {\n        if (!NFC_ENABLED) {\n            wakeup();\n        }\n\n        // Send command.\n        let buf: number[] = [];\n        buf = [PN532_PREAMBLE, PN532_STARTCODE1, PN532_STARTCODE2, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, PN532_POSTAMBLE];\n        let cmdUid = pins.createBufferFromArray(buf);\n        writeAndReadBuffer(cmdUid, 24);\n\n        // Check acknowledgment and status.\n        for (let i = 0; i < 4; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                return false;\n            }\n        }\n        if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n            return false;\n        }\n\n        // Assemble ID from buffer.\n        for (let i = 0; i < uId.length; i++) {\n            uId[i] = recvBuf[14 + i];\n        }\n\n        // Final check for invalid ID.\n        if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n            return false;\n        }\n\n        if (uId[0] == firstNumber && uId[1] == secondNumber && uId[2] == thirdNumber && uId[3] == fourthNumber) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Testing code.\n    serial.writeLine('Hello.');\n    while (true) {\n        serial.writeLine('\\nChecking for card...');\n        let foundId = checkCardId();\n        if (foundId != '') {\n            serial.writeLine('CARD FOUND. UID is: ' + foundId)\n        } else {\n            serial.writeLine('NO CARD.');\n        }\n        basic.pause(1000);\n    }\n\n}\n\n","README.md":"","pxt.json":"{\n    \"name\": \"i2c NFC extension prototyping\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1735455057464}